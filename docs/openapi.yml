openapi: 3.0.0
info:
  version: 0.1.0
  title: BassieMusic API
  description: An online music streaming platform with music download capabilities

servers:
  - url: "https://bassiemusic-api.plaatsoft.nl"
  - url: "http://localhost:8080"

components:
  securitySchemes:
    TokenAuth:
      type: http
      scheme: bearer

  parameters:
    Query:
      name: q
      in: query
      description: Search query
      required: false
      schema:
        type: string
    QueryRequired:
      name: q
      in: query
      description: Search query
      required: true
      schema:
        type: string
    Page:
      name: page
      in: query
      description: Page index (page size is set by limit)
      required: false
      schema:
        type: integer
    Limit:
      name: limit
      in: query
      description: Item count per page
      required: false
      schema:
        type: integer

    ArtistID:
      name: id
      in: path
      description: Artist ID
      required: true
      schema:
        type: string
        format: uuid
    AlbumID:
      name: id
      in: path
      description: Album ID
      required: true
      schema:
        type: string
        format: uuid
    GenreID:
      name: id
      in: path
      description: Genre ID
      required: true
      schema:
        type: string
        format: uuid
    TrackID:
      name: id
      in: path
      description: Track ID
      required: true
      schema:
        type: string
        format: uuid
    PlaylistID:
      name: id
      in: path
      description: Playlist ID
      required: true
      schema:
        type: string
        format: uuid
    UserID:
      name: id
      in: path
      description: User ID
      required: true
      schema:
        type: string
        format: uuid
    SessionID:
      name: id
      in: path
      description: Session ID
      required: true
      schema:
        type: string
        format: uuid
    DownloadTaskID:
      name: id
      in: path
      description: Download Task ID
      required: true
      schema:
        type: string
        format: uuid

paths:
  # BassieMusic
  /:
    get:
      tags: [BassieMusic]
      description: Get some information about this REST API
      responses:
        "200":
          description: Name and version of this REST API
  /ws:
    get:
      tags: [BassieMusic]
      description: Use a HTTP upgrade to connect to the websocket server
      responses:
        "101":
          description: Switch to the websocket protocol
  /agent:
    get:
      tags: [BassieMusic]
      description: Get information about your used user agent
      responses:
        "200":
          description: Information about your user agent

  # Apps
  /apps/macos/version:
    get:
      tags: [Apps]
      description: Get latest BassieMusic macOS app version
      responses:
        "200":
          description: Latest BassieMusic macOS app version
  /apps/macos/download:
    get:
      tags: [Apps]
      description: Redirect to the latest BassieMusic macOS app download file
      responses:
        "301":
          description: Redirect to the latest BassieMusic macOS app download file

  /apps/windows/version:
    get:
      tags: [Apps]
      description: Get latest BassieMusic Windows app version
      responses:
        "200":
          description: Latest BassieMusic Windows app version
  /apps/windows/download:
    get:
      tags: [Apps]
      description: Redirect to the latest BassieMusic Windows app download file
      responses:
        "301":
          description: Redirect to the latest BassieMusic Windows app download file

  # Auth
  /auth/login:
    post:
      tags: [Auth]
      description: Login with user credentials
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                logon:
                  type: string
                password:
                  type: string
              required:
                - logon
                - password
      responses:
        "200":
          description: Successfull response
        "400":
          description: Bad Request
  /auth/validate:
    get:
      tags: [Auth]
      description: Validate your auth token
      security:
        - TokenAuth: []
      responses:
        "200":
          description: Successfull response
        "401":
          description: Authorization error
  /auth/logout:
    put:
      tags: [Auth]
      description: Logout your auth token
      security:
        - TokenAuth: []
      responses:
        "200":
          description: Successfull response
        "401":
          description: Authorization error

  # Search
  /search:
    get:
      tags: [Search]
      description: Search your whole library with query
      security:
        - TokenAuth: []
      parameters:
        - $ref: "#/components/parameters/QueryRequired"
      responses:
        "200":
          description: Successfull response
        "401":
          description: Authorization error
  /deezer_search:
    get:
      tags: [Search]
      description: Search Deezer API items that are not missing in your library with query
      security:
        - TokenAuth: []
      parameters:
        - $ref: "#/components/parameters/QueryRequired"
      responses:
        "200":
          description: Successfull response
        "401":
          description: Authorization error

  # Artists
  /artists:
    get:
      tags: [Artists]
      description: Get a list of artists
      security:
        - TokenAuth: []
      parameters:
        - $ref: "#/components/parameters/Query"
        - $ref: "#/components/parameters/Page"
        - $ref: "#/components/parameters/Limit"
        - name: sort_by
          in: query
          description: Sort items by
          required: false
          schema:
            type: string
            enum: ['name', 'name_desc', 'sync', 'sync_desc', 'created_at', 'created_at_desc']
      responses:
        "200":
          description: Successfull response
        "401":
          description: Authorization error
  /artists/{id}:
    get:
      tags: [Artists]
      description: Get artist
      security:
        - TokenAuth: []
      parameters:
        - $ref: "#/components/parameters/ArtistID"
      responses:
        "200":
          description: Successfull response
        "401":
          description: Authorization error
        "404":
          description: Artist not found
    put:
      tags: [Artists]
      description: Update artist
      security:
        - TokenAuth: []
      parameters:
        - $ref: "#/components/parameters/ArtistID"
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                name:
                  type: string
                sync:
                  type: boolean
                deezer_id:
                  type: integer
                  format: int64
          multipart/form-data:
            schema:
              type: object
              properties:
                name:
                  type: string
                sync:
                  type: boolean
                deezer_id:
                  type: integer
                  format: int64
                image:
                  type: string
                  format: binary
      responses:
        "200":
          description: Successfull response
        "400":
          description: Bad Request
        "401":
          description: Authorization error
        "404":
          description: Artist not found
    delete:
      tags: [Artists]
      description: Delete artist
      security:
        - TokenAuth: []
      parameters:
        - $ref: "#/components/parameters/ArtistID"
      responses:
        "200":
          description: Successfull response
        "401":
          description: Authorization error
        "404":
          description: User not found
  /artists/{id}/tracks:
    get:
      tags: [Artists]
      description: Get a list of tracks from artist
      security:
        - TokenAuth: []
      parameters:
        - $ref: "#/components/parameters/Page"
        - $ref: "#/components/parameters/Limit"
        - name: sort_by
          in: query
          description: Sort items by
          required: false
          schema:
            type: string
            enum: ['plays', 'plays_desc', 'title', 'title_desc', 'created_at', 'created_at_desc']
      responses:
        "200":
          description: Successfull response
        "401":
          description: Authorization error
  /artists/{id}/like:
    put:
      tags: [Artists]
      description: Like an artist with authed user
      security:
        - TokenAuth: []
      parameters:
        - $ref: "#/components/parameters/ArtistID"
      responses:
        "200":
          description: Successfull response
        "401":
          description: Authorization error
        "404":
          description: Artist not found
    delete:
      tags: [Artists]
      description: Delete a liked to an artist
      security:
        - TokenAuth: []
      parameters:
        - $ref: "#/components/parameters/ArtistID"
      responses:
        "200":
          description: Successfull response
        "401":
          description: Authorization error
        "404":
          description: Artist not found

  # Genres
  /genres:
    get:
      tags: [Genres]
      description: Get a list of genres
      security:
        - TokenAuth: []
      parameters:
        - $ref: "#/components/parameters/Query"
        - $ref: "#/components/parameters/Page"
        - $ref: "#/components/parameters/Limit"
        - name: sort_by
          in: query
          description: Sort items by
          required: false
          schema:
            type: string
            enum: ['name', 'name_desc', 'created_at', 'created_at_desc']
      responses:
        "200":
          description: Successfull response
        "401":
          description: Authorization error
  /genres/{id}:
    get:
      tags: [Genres]
      description: Get genre
      security:
        - TokenAuth: []
      parameters:
        - $ref: "#/components/parameters/GenreID"
      responses:
        "200":
          description: Successfull response
        "401":
          description: Authorization error
        "404":
          description: Genre not found
    put:
      tags: [Genres]
      description: Update genre
      security:
        - TokenAuth: []
      parameters:
        - $ref: "#/components/parameters/GenreID"
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                name:
                  type: string
                deezer_id:
                  type: integer
                  format: int64
          multipart/form-data:
            schema:
              type: object
              properties:
                name:
                  type: string
                deezer_id:
                  type: integer
                  format: int64
                image:
                  type: string
                  format: binary
      responses:
        "200":
          description: Successfull response
        "400":
          description: Bad Request
        "401":
          description: Authorization error
        "404":
          description: Genre not found
    delete:
      tags: [Genres]
      description: Delete genre
      security:
        - TokenAuth: []
      parameters:
        - $ref: "#/components/parameters/GenreID"
      responses:
        "200":
          description: Successfull response
        "401":
          description: Authorization error
        "404":
          description: User not found
  /genres/{id}/albums:
    get:
      tags: [Genres]
      description: Get a list of albums that have genre
      security:
        - TokenAuth: []
      parameters:
        - $ref: "#/components/parameters/GenreID"
      responses:
        "200":
          description: Successfull response
        "401":
          description: Authorization error
        "404":
          description: Genre not found
  /genres/{id}/like:
    put:
      tags: [Genres]
      description: Like a genre with authed user
      security:
        - TokenAuth: []
      parameters:
        - $ref: "#/components/parameters/GenreID"
      responses:
        "200":
          description: Successfull response
        "401":
          description: Authorization error
        "404":
          description: Genre not found
    delete:
      tags: [Genres]
      description: Delete a liked to a genre
      security:
        - TokenAuth: []
      parameters:
        - $ref: "#/components/parameters/GenreID"
      responses:
        "200":
          description: Successfull response
        "401":
          description: Authorization error
        "404":
          description: Genre not found

  # Albums
  /albums:
    get:
      tags: [Albums]
      description: Get a list of albums
      security:
        - TokenAuth: []
      parameters:
        - $ref: "#/components/parameters/Query"
        - $ref: "#/components/parameters/Page"
        - $ref: "#/components/parameters/Limit"
        - name: sort_by
          in: query
          description: Sort items by
          required: false
          schema:
            type: string
            enum: ['title', 'title_desc', 'released_at', 'released_at_desc', 'created_at', 'created_at_desc']
      responses:
        "200":
          description: Successfull response
        "401":
          description: Authorization error
  /albums/{id}:
    get:
      tags: [Albums]
      description: Get album
      security:
        - TokenAuth: []
      parameters:
        - $ref: "#/components/parameters/AlbumID"
      responses:
        "200":
          description: Successfull response
        "401":
          description: Authorization error
        "404":
          description: Album not found
    put:
      tags: [Albums]
      description: Update album
      security:
        - TokenAuth: []
      parameters:
        - $ref: "#/components/parameters/AlbumID"
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                title:
                  type: string
                type:
                  type: string
                  enum: [album, ep, single]
                released_at:
                  type: string
                  format: date
                explicit:
                  type: boolean
                deezer_id:
                  type: integer
                  format: int64
          multipart/form-data:
            schema:
              type: object
              properties:
                title:
                  type: string
                type:
                  type: string
                  enum: [album, ep, single]
                released_at:
                  type: string
                  format: date
                explicit:
                  type: boolean
                deezer_id:
                  type: integer
                  format: int64
                cover:
                  type: string
                  format: binary
      responses:
        "200":
          description: Successfull response
        "400":
          description: Bad Request
        "401":
          description: Authorization error
        "404":
          description: Album not found
    delete:
      tags: [Albums]
      description: Delete album
      security:
        - TokenAuth: []
      parameters:
        - $ref: "#/components/parameters/AlbumID"
      responses:
        "200":
          description: Successfull response
        "401":
          description: Authorization error
        "404":
          description: User not found
  /albums/{id}/like:
    put:
      tags: [Albums]
      description: Like an album with authed user
      security:
        - TokenAuth: []
      parameters:
        - $ref: "#/components/parameters/AlbumID"
      responses:
        "200":
          description: Successfull response
        "401":
          description: Authorization error
        "404":
          description: Album not found
    delete:
      tags: [Albums]
      description: Delete a liked to an album
      security:
        - TokenAuth: []
      parameters:
        - $ref: "#/components/parameters/AlbumID"
      responses:
        "200":
          description: Successfull response
        "401":
          description: Authorization error
        "404":
          description: Album not found

  # Tracks
  /tracks:
    get:
      tags: [Tracks]
      description: Get a list of tracks
      security:
        - TokenAuth: []
      parameters:
        - $ref: "#/components/parameters/Query"
        - $ref: "#/components/parameters/Page"
        - $ref: "#/components/parameters/Limit"
        - name: sort_by
          in: query
          description: Sort items by
          required: false
          schema:
            type: string
            enum: ['plays', 'plays_desc', 'title', 'title_desc', 'created_at', 'created_at_desc']
      responses:
        "200":
          description: Successfull response
        "401":
          description: Authorization error
  /tracks/{id}:
    get:
      tags: [Tracks]
      description: Get track
      security:
        - TokenAuth: []
      parameters:
        - $ref: "#/components/parameters/TrackID"
      responses:
        "200":
          description: Successfull response
        "401":
          description: Authorization error
        "404":
          description: Track not found
    put:
      tags: [Tracks]
      description: Update track
      security:
        - TokenAuth: []
      parameters:
        - $ref: "#/components/parameters/TrackID"
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                title:
                  type: string
                album_id:
                  type: string
                  format: uuid
                disk:
                  type: integer
                  format: int32
                position:
                  type: integer
                  format: int32
                explicit:
                  type: boolean
                deezer_id:
                  type: integer
                  format: int64
                youtube_id:
                  type: string
      responses:
        "200":
          description: Successfull response
        "400":
          description: Bad Request
        "401":
          description: Authorization error
        "404":
          description: Album not found
    delete:
      tags: [Tracks]
      description: Delete track
      security:
        - TokenAuth: []
      parameters:
        - $ref: "#/components/parameters/TrackID"
      responses:
        "200":
          description: Successfull response
        "401":
          description: Authorization error
        "404":
          description: User not found
  /tracks/{id}/play:
    put:
      tags: [Tracks]
      description: Play a track
      security:
        - TokenAuth: []
      parameters:
        - $ref: "#/components/parameters/TrackID"
      responses:
        "200":
          description: Successfull response
        "401":
          description: Authorization error
        "404":
          description: Track not found
  /tracks/{id}/like:
    put:
      tags: [Tracks]
      description: Like a track with authed user
      security:
        - TokenAuth: []
      parameters:
        - $ref: "#/components/parameters/TrackID"
      responses:
        "200":
          description: Successfull response
        "401":
          description: Authorization error
        "404":
          description: Track not found
    delete:
      tags: [Tracks]
      description: Delete a liked to a track
      security:
        - TokenAuth: []
      parameters:
        - $ref: "#/components/parameters/TrackID"
      responses:
        "200":
          description: Successfull response
        "401":
          description: Authorization error
        "404":
          description: Track not found

  # Playlists
  /playlists:
    get:
      tags: [Playlists]
      description: Get a list of playlists
      security:
        - TokenAuth: []
      parameters:
        - $ref: "#/components/parameters/Query"
        - $ref: "#/components/parameters/Page"
        - $ref: "#/components/parameters/Limit"
        - name: sort_by
          in: query
          description: Sort items by
          required: false
          schema:
            type: string
            enum: ['name', 'name_desc', 'public', 'public_desc', 'created_at', 'created_at_desc', 'updated_at', 'updated_at_desc']
      responses:
        "200":
          description: Successfull response
        "401":
          description: Authorization error
    post:
      tags: [Playlists]
      description: Create a new playlist
      security:
        - TokenAuth: []
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                name:
                  type: string
                public:
                  type: boolean
              required:
                - name
                - public
          multipart/form-data:
            schema:
              type: object
              properties:
                name:
                  type: string
                public:
                  type: boolean
                image:
                  type: string
                  format: binary
              required:
                - name
                - public
      responses:
        "200":
          description: Successfull response
        "400":
          description: Bad Request
        "401":
          description: Authorization error
  /playlists/{id}:
    get:
      tags: [Playlists]
      description: Get playlist
      security:
        - TokenAuth: []
      parameters:
        - $ref: "#/components/parameters/PlaylistID"
      responses:
        "200":
          description: Successfull response
        "401":
          description: Authorization error
        "404":
          description: Playlist not found
    put:
      tags: [Playlists]
      description: Update playlist
      security:
        - TokenAuth: []
      parameters:
        - $ref: "#/components/parameters/PlaylistID"
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                name:
                  type: string
                public:
                  type: boolean
          multipart/form-data:
            schema:
              type: object
              properties:
                name:
                  type: string
                public:
                  type: boolean
                image:
                  type: string
                  format: binary
      responses:
        "200":
          description: Successfull response
        "400":
          description: Bad Request
        "401":
          description: Authorization error
        "404":
          description: Playlist not found
    delete:
      tags: [Playlists]
      description: Delete playlist
      security:
        - TokenAuth: []
      parameters:
        - $ref: "#/components/parameters/PlaylistID"
      responses:
        "200":
          description: Successfull response
        "401":
          description: Authorization error
        "404":
          description: Playlist not found
  /playlists/{id}/tracks:
    post:
      tags: [Playlists]
      description: Append track to playlist
      security:
        - TokenAuth: []
      parameters:
        - $ref: "#/components/parameters/PlaylistID"
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                track_id:
                  type: string
                  format: uuid
              required:
                - track_id
      responses:
        "200":
          description: Successfull response
        "400":
          description: Bad Request
        "401":
          description: Authorization error
        "404":
          description: Playlist not found
  /playlists/{id}/tracks/{position}:
    put:
      tags: [Playlists]
      description: Insert track into playlist
      security:
        - TokenAuth: []
      parameters:
        - $ref: "#/components/parameters/PlaylistID"
        - name: position
          in: path
          description: Track position in playlist
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                track_id:
                  type: string
                  format: uuid
              required:
                - track_id
      responses:
        "200":
          description: Successfull response
        "400":
          description: Bad Request
        "401":
          description: Authorization error
        "404":
          description: Playlist not found
    delete:
      tags: [Playlists]
      description: Delete track from playlist
      security:
        - TokenAuth: []
      parameters:
        - $ref: "#/components/parameters/PlaylistID"
        - name: position
          in: path
          description: Track position in playlist
          required: true
          schema:
            type: integer
      responses:
        "200":
          description: Successfull response
        "400":
          description: Bad Request
        "401":
          description: Authorization error
        "404":
          description: Playlist not found
  /playlists/{id}/like:
    put:
      tags: [Playlists]
      description: Like a playlist with authed user
      security:
        - TokenAuth: []
      parameters:
        - $ref: "#/components/parameters/PlaylistID"
      responses:
        "200":
          description: Successfull response
        "401":
          description: Authorization error
        "404":
          description: Playlist not found
    delete:
      tags: [Playlists]
      description: Delete a liked to a playlist
      security:
        - TokenAuth: []
      parameters:
        - $ref: "#/components/parameters/PlaylistID"
      responses:
        "200":
          description: Successfull response
        "401":
          description: Authorization error
        "404":
          description: Playlist not found

  # Users
  /users:
    get:
      tags: [Users]
      description: Get a list of users
      security:
        - TokenAuth: []
      parameters:
        - $ref: "#/components/parameters/Query"
        - $ref: "#/components/parameters/Page"
        - $ref: "#/components/parameters/Limit"
      responses:
        "200":
          description: Successfull response
        "400":
          description: Bad Request
        "401":
          description: Authorization error
    post:
      tags: [Users]
      description: Create a new user
      security:
        - TokenAuth: []
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                username:
                  type: string
                email:
                  type: string
                  format: email
                password:
                  type: string
                allow_explicit:
                  type: boolean
                role:
                  type: string
                  enum: [normal, admin]
              required:
                - username
                - email
                - password
                - allow_explicit
                - role
          multipart/form-data:
            schema:
              type: object
              properties:
                username:
                  type: string
                email:
                  type: string
                  format: email
                password:
                  type: string
                allow_explicit:
                  type: boolean
                role:
                  type: string
                  enum: [normal, admin]
                avatar:
                  type: string
                  format: binary
              required:
                - username
                - email
                - password
                - allow_explicit
                - role
      responses:
        "200":
          description: Successfull response
        "400":
          description: Bad Request
        "401":
          description: Authorization error
  /users/{id}:
    get:
      tags: [Users]
      description: Get user
      security:
        - TokenAuth: []
      parameters:
        - $ref: "#/components/parameters/UserID"
      responses:
        "200":
          description: Successfull response
        "401":
          description: Authorization error
        "404":
          description: User not found
    put:
      tags: [Users]
      description: Update user
      security:
        - TokenAuth: []
      parameters:
        - $ref: "#/components/parameters/UserID"
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                username:
                  type: string
                email:
                  type: string
                  format: email
                password:
                  type: string
                allow_explicit:
                  type: boolean
                role:
                  type: string
                  enum: [normal, admin]
                language:
                  type: string
                  enum: [en, nl]
                theme:
                  type: string
                  enum: [system, light, dark]
          multipart/form-data:
            schema:
              type: object
              properties:
                username:
                  type: string
                email:
                  type: string
                  format: email
                password:
                  type: string
                allow_explicit:
                  type: boolean
                role:
                  type: string
                  enum: [normal, admin]
                language:
                  type: string
                  enum: [en, nl]
                theme:
                  type: string
                  enum: [system, light, dark]
                avatar:
                  type: string
                  format: binary
      responses:
        "200":
          description: Successfull response
        "400":
          description: Bad Request
        "401":
          description: Authorization error
        "404":
          description: User not found
    delete:
      tags: [Users]
      description: Delete user
      security:
        - TokenAuth: []
      parameters:
        - $ref: "#/components/parameters/UserID"
      responses:
        "200":
          description: Successfull response
        "401":
          description: Authorization error
        "404":
          description: User not found
  /users/{id}/liked_artists:
    get:
      tags: [Users]
      description: Get a list of liked artists of user
      security:
        - TokenAuth: []
      parameters:
        - $ref: "#/components/parameters/UserID"
        - $ref: "#/components/parameters/Query"
        - $ref: "#/components/parameters/Page"
        - $ref: "#/components/parameters/Limit"
        - name: sort_by
          in: query
          description: Sort items by
          required: false
          schema:
            type: string
            enum: ['liked_at', 'liked_at_desc', 'name', 'name_desc', 'sync', 'sync_desc', 'created_at', 'created_at_desc']
      responses:
        "200":
          description: Successfull response
        "401":
          description: Authorization error
        "404":
          description: User not found
  /users/{id}/liked_albums:
    get:
      tags: [Users]
      description: Get a list of liked albums of user
      security:
        - TokenAuth: []
      parameters:
        - $ref: "#/components/parameters/UserID"
        - $ref: "#/components/parameters/Query"
        - $ref: "#/components/parameters/Page"
        - $ref: "#/components/parameters/Limit"
        - name: sort_by
          in: query
          description: Sort items by
          required: false
          schema:
            type: string
            enum: ['liked_at', 'liked_at_desc', 'title', 'title_desc', 'released_at', 'released_at_desc', 'created_at', 'created_at_desc']
      responses:
        "200":
          description: Successfull response
        "401":
          description: Authorization error
        "404":
          description: User not found
  /users/{id}/liked_genres:
    get:
      tags: [Users]
      description: Get a list of liked genres of user
      security:
        - TokenAuth: []
      parameters:
        - $ref: "#/components/parameters/UserID"
        - $ref: "#/components/parameters/Query"
        - $ref: "#/components/parameters/Page"
        - $ref: "#/components/parameters/Limit"
        - name: sort_by
          in: query
          description: Sort items by
          required: false
          schema:
            type: string
            enum: ['liked_at', 'liked_at_desc', 'name', 'name_desc', 'created_at', 'created_at_desc']
      responses:
        "200":
          description: Successfull response
        "401":
          description: Authorization error
        "404":
          description: User not found
  /users/{id}/liked_tracks:
    get:
      tags: [Users]
      description: Get a list of liked tracks of user
      security:
        - TokenAuth: []
      parameters:
        - $ref: "#/components/parameters/UserID"
        - $ref: "#/components/parameters/Query"
        - $ref: "#/components/parameters/Page"
        - $ref: "#/components/parameters/Limit"
        - name: sort_by
          in: query
          description: Sort items by
          required: false
          schema:
            type: string
            enum: ['liked_at', 'liked_at_desc', 'title', 'title_desc', 'plays', 'plays_desc', 'created_at', 'created_at_desc']
      responses:
        "200":
          description: Successfull response
        "401":
          description: Authorization error
        "404":
          description: User not found
  /users/{id}/liked_playlists:
    get:
      tags: [Users]
      description: Get a list of liked playlists of user
      security:
        - TokenAuth: []
      parameters:
        - $ref: "#/components/parameters/UserID"
        - $ref: "#/components/parameters/Query"
        - $ref: "#/components/parameters/Page"
        - $ref: "#/components/parameters/Limit"
        - name: sort_by
          in: query
          description: Sort items by
          required: false
          schema:
            type: string
            enum: ['liked_at', 'liked_at_desc', 'name', 'name_desc', 'public', 'public_desc', 'created_at', 'created_at_desc', 'updated_at', 'updated_at_desc']
      responses:
        "200":
          description: Successfull response
        "401":
          description: Authorization error
        "404":
          description: User not found
  /users/{id}/played_tracks:
    get:
      tags: [Users]
      description: Get a list of played tracks history of user
      security:
        - TokenAuth: []
      parameters:
        - $ref: "#/components/parameters/UserID"
        - $ref: "#/components/parameters/Query"
        - $ref: "#/components/parameters/Page"
        - $ref: "#/components/parameters/Limit"
      responses:
        "200":
          description: Successfull response
        "401":
          description: Authorization error
        "404":
          description: User not found
  /users/{id}/sessions:
    get:
      tags: [Users]
      description: Get a list of sessions of user
      security:
        - TokenAuth: []
      parameters:
        - $ref: "#/components/parameters/UserID"
        - $ref: "#/components/parameters/Page"
        - $ref: "#/components/parameters/Limit"
      responses:
        "200":
          description: Successfull response
        "401":
          description: Authorization error
        "404":
          description: User not found
  /users/{id}/active_sessions:
    get:
      tags: [Users]
      description: Get a list of active user sessions
      security:
        - TokenAuth: []
      parameters:
        - $ref: "#/components/parameters/UserID"
        - $ref: "#/components/parameters/Page"
        - $ref: "#/components/parameters/Limit"
      responses:
        "200":
          description: Successfull response
        "401":
          description: Authorization error
        "404":
          description: User not found
  /users/{id}/playlists:
    get:
      tags: [Users]
      description: Get a list of playlists of user
      security:
        - TokenAuth: []
      parameters:
        - $ref: "#/components/parameters/UserID"
        - $ref: "#/components/parameters/Query"
        - $ref: "#/components/parameters/Page"
        - $ref: "#/components/parameters/Limit"
        - name: sort_by
          in: query
          description: Sort items by
          required: false
          schema:
            type: string
            enum: ['name', 'name_desc', 'public', 'public_desc', 'created_at', 'created_at_desc', 'updated_at', 'updated_at_desc']
      responses:
        "200":
          description: Successfull response
        "401":
          description: Authorization error
        "404":
          description: User not found

  # Sessions
  /sessions:
    get:
      tags: [Sessions]
      description: Get a list of all sessions
      security:
        - TokenAuth: []
      responses:
        "200":
          description: Successfull response
        "400":
          description: Bad Request
        "401":
          description: Authorization error
  /sessions/{id}:
    get:
      tags: [Sessions]
      description: Get a session
      security:
        - TokenAuth: []
      parameters:
        - $ref: "#/components/parameters/SessionID"
      responses:
        "200":
          description: Successfull response
        "401":
          description: Authorization error
        "404":
          description: Session not found
  /sessions/{id}/revoke:
    put:
      tags: [Sessions]
      description: Revoke a session
      security:
        - TokenAuth: []
      parameters:
        - $ref: "#/components/parameters/SessionID"
      responses:
        "200":
          description: Successfull response
        "401":
          description: Authorization error
        "404":
          description: Session not found

  # Download
  /download/artist:
    post:
      tags: [Downloader]
      description: Add a queue item to download a Deezer artist
      security:
        - TokenAuth: []
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                deezer_id:
                  type: integer
                  format: int64
                display_name:
                  type: string
              required:
                - deezer_id
                - display_name
      responses:
        "200":
          description: Successfull response
        "400":
          description: Bad Request
        "401":
          description: Authorization error
  /download/album:
    post:
      tags: [Downloader]
      description: Add a queue item to download a Deezer album
      security:
        - TokenAuth: []
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                deezer_id:
                  type: integer
                  format: int64
                display_name:
                  type: string
              required:
                - deezer_id
                - display_name
      responses:
        "200":
          description: Successfull response
        "400":
          description: Bad Request
        "401":
          description: Authorization error
  /download/{id}:
    delete:
      tags: [Downloader]
      description: Delete a download task that is pending
      security:
        - TokenAuth: []
      parameters:
        - $ref: "#/components/parameters/DownloadTaskID"
      responses:
        "200":
          description: Successfull response
        "401":
          description: Bad Request
        "404":
          description: Download Task not found
